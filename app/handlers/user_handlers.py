import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.enums import ContentType
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.common import send_welcome
from services.texts import WELCOME_TEXT
from models.models import Product
from services.repository import Repository
# --- –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢–´ –ö–õ–ê–í–ò–ê–¢–£–† ---
from keyboards.inline import (
    product_list_keyboard,
    reply_to_user_keyboard,
    reply_to_admin_keyboard
)
from core.config import settings

router = Router()

# FSM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –∑–∞—è–≤–∫–µ
class ReplyToAdmin(StatesGroup):
    waiting_for_message = State()



# --- –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ú–ï–ù–Æ ---

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, bot: Bot):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await send_welcome(callback.from_user.id, bot, settings)
    await callback.answer()


@router.callback_query(F.data == "show_products")
async def show_product_list(callback: CallbackQuery, session: AsyncSession):
    repo = Repository(session)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=await product_list_keyboard(repo)
    )

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "—á–∞—Å–∏–∫–æ–≤" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer()


# --- –õ–û–ì–ò–ö–ê –ü–û–ö–£–ü–ö–ò –¢–û–í–ê–†–ê ---

@router.callback_query(F.data.startswith("product_"))
async def create_order(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    product_id = int(callback.data.split("_")[1])
    user = callback.from_user
    repo = Repository(session)

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order = await repo.create_order(user_id=user.id, product_id=product_id)
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    product = await repo.session.get(Product, product_id)
    
    # 3. –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    price_rub = product.price if product else 0
    admin_text = (f"üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{order.order_id}</b>\n\n"
                  f"<b>–û—Ç:</b> {user.full_name}\n"
                  f"<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                  f"<b>User ID:</b> <code>{user.id}</code>\n\n"
                  f"<b>–¢–æ–≤–∞—Ä:</b> {product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
                  f"<b>–¶–µ–Ω–∞:</b> {price_rub:.2f} —Ä—É–±.")
    
    # 4. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in settings.ADMIN_LIST:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                reply_markup=reply_to_user_keyboard(order.order_id, user.id)
            )
        except Exception as e:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –º—ã —É–≤–∏–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
    user_text = (f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order.order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                 f"<b>–¢–æ–≤–∞—Ä:</b> {product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
                 f"<b>–¶–µ–Ω–∞:</b> {price_rub:.2f} —Ä—É–±.\n\n"
                 f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

    await callback.message.edit_text(
        text=user_text,
        reply_markup=reply_to_admin_keyboard(order.order_id)
    )

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---

@router.callback_query(F.data.startswith("reply_admin_"))
async def reply_to_admin_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    await state.set_state(ReplyToAdmin.waiting_for_message)
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await callback.answer()

@router.message(ReplyToAdmin.waiting_for_message)
async def send_reply_to_admin(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_id = data['order_id']
    user = message.from_user
    
    info_header = (f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id}\n\n"
                   f"<b>–û—Ç:</b> {user.full_name} (@{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                   f"<b>User ID:</b> <code>{user.id}</code>")

    reply_kb = reply_to_user_keyboard(order_id, user.id)

    for admin_id in settings.ADMIN_LIST:
        try:
            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê IF/ELSE ---
            # –ï–°–õ–ò –°–û–û–ë–©–ï–ù–ò–ï - –≠–¢–û –ü–†–û–°–¢–û –¢–ï–ö–°–¢
            if message.content_type == ContentType.TEXT:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                full_text = f"{info_header}\n\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<blockquote>{message.text}</blockquote>"
                await bot.send_message(chat_id=admin_id, text=full_text, reply_markup=reply_kb)
            
            # –ï–°–õ–ò –°–û–û–ë–©–ï–ù–ò–ï - –≠–¢–û –§–û–¢–û, –î–û–ö–£–ú–ï–ù–¢, –í–ò–î–ï–û –ò –¢.–î.
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –î–í–ê —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ "—à–∞–ø–∫—É", –ø–æ—Ç–æ–º —Å–∞–º —Ñ–∞–π–ª
                await bot.send_message(chat_id=admin_id, text=info_header)
                await message.copy_to(chat_id=admin_id, reply_markup=reply_kb)

        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=reply_to_admin_keyboard(order_id)
    )
    await state.clear()

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import BotCommand
from sqlalchemy.ext.asyncio import async_sessionmaker

from core.config import settings
from core.db import engine
from models.models import Base
from handlers import common, user_handlers, admin_handlers
from middlewares.db import DbSessionMiddleware

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –ë–î
async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def set_bot_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram.
    """
    commands = [
        BotCommand(
            command="start",
            description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"
        )
        # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è
        # BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)
    
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    
    # –î–∞–µ–º –ë–î –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ "–ø—Ä–æ–≥—Ä–µ–≤"
    await asyncio.sleep(5) 

    # --- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ ---
    logging.info("Creating database tables...")
    await create_tables()
    logging.info("Tables created successfully.")
    # -------------------------------------------

    bot = Bot(token=settings.BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()

    session_maker = async_sessionmaker(engine, expire_on_commit=False)
    dp.update.middleware(DbSessionMiddleware(session_pool=session_maker))

    dp.include_router(common.router)
    dp.include_router(user_handlers.router)
    dp.include_router(admin_handlers.router)

    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")